import os
import gymnasium
import highway_env
import numpy as np
import time
import json
from matplotlib import pyplot as plt
from openai import OpenAI
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Get API key from environment
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("OPENAI_API_KEY environment variable is not set")

# Initialize OpenAI client
client = OpenAI(api_key=api_key)

# Create log directory if it doesn't exist
log_dir = "intersection_logs"
os.makedirs(log_dir, exist_ok=True)

# Generate a unique log filename with timestamp
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
log_filename = f"{log_dir}/intersection_session_{timestamp}.log"

# Log the start of the session
with open(log_filename, "w") as f:
    f.write(f"=== Intersection Session Started at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n\n")

def log_message(message, agent_id=None):
    """Log a message to the log file with a timestamp"""
    current_time = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    prefix = f"[{current_time}]"
    if agent_id is not None:
        prefix += f" [Agent {agent_id}]"
    
    with open(log_filename, "a") as f:
        f.write(f"{prefix} {message}\n")

# -------------------
# 1. Create the intersection environment with only "LEFT + speed control"
#    by specifying 3 possible actions in the config:
#       0 -> SLOWER + LANE_LEFT
#       1 -> IDLE   + LANE_LEFT
#       2 -> FASTER + LANE_LEFT
# -------------------
env = gymnasium.make(
    "intersection-v1",
    render_mode="human",
    config={
        "observation": {
            "type": "MultiAgentObservation",
            "observation_config": {
                "type": "Kinematics",
                "vehicles_count": 15,
                "features": ["presence", "x", "y", "vx", "vy", "cos_h", "sin_h"],
                "features_range": {
                    "x": [-100, 100],
                    "y": [-100, 100],
                    "vx": [-20, 20],
                    "vy": [-20, 20],
                },
                "absolute": True,
                "flatten": False,
                "observe_intentions": False
            }
        },
        "action": {
            "type": "MultiAgentAction",
            "action_config": {
                "type": "DiscreteMetaAction",
                # EXACTLY THREE ACTIONS:
                "actions": [
                    {"type": "SLOWER", "lateral": "LANE_LEFT"},
                    {"type": "IDLE",   "lateral": "LANE_LEFT"},
                    {"type": "FASTER", "lateral": "LANE_LEFT"}
                ]
            }
        },
        # Number of controlled vehicles
        "controlled_vehicles": 3,

        "controlled_vehicles_highlight": True,
        "vehicles_sizes": {
            0: 1.5,
            1: 1.5,
            2: 1.5,
        },
        
        # Environment parameters
        "duration": 13,  # [s]
        "destination": "o1",
        "initial_vehicle_count": 10,
        "vehicle_density": 2,
        "spawn_probability": 0.6,
        "screen_width": 800,
        "screen_height": 800,
        "centering_position": [0.5, 0.6],
        "scaling": 5.5 * 1.3,
        "show_trajectories": True,
    }
)

log_message("Environment created with custom left-turn + speed-control action space.")
num_agents = env.unwrapped.config["controlled_vehicles"]
log_message(f"Number of controlled vehicles: {num_agents}")

# Clear explanation logs at the start of each run
for i in range(num_agents):
    # Create or truncate (clear) the explanation log file
    with open(f"intersection_explanations_agent_{i}.txt", "w") as f:
        f.write(f"=== Explanation Log for Agent {i} - Session: {timestamp} ===\n\n")
    log_message(f"Cleared explanation log file", agent_id=i)

# Reset the environment and get initial observations
obs, info = env.reset()

# Print the observation structure to verify multi-agent setup
print("Observation structure:", type(obs))
print("Number of observations:", len(obs))
for i, obs_i in enumerate(obs):
    print(f"Observation for vehicle {i}:", obs_i.shape)
    log_message(f"Initial observation shape: {obs_i.shape}", agent_id=i)

def parse_observation(observation, agent_idx):
    """
    Parse and describe the observation in human-readable format
    """
    nearby_vehicles = []
    
    # Each row corresponds to one vehicle
    for i in range(len(observation)):
        vehicle = observation[i]
        presence = vehicle[0]
        
        # Skip vehicles that are not present
        if presence < 0.5:
            continue
            
        x, y = vehicle[1], vehicle[2]
        vx, vy = vehicle[3], vehicle[4]
        cos_h, sin_h = vehicle[5], vehicle[6]
        
        distance = np.sqrt(x**2 + y**2) if i > 0 else 0.0
        heading_angle = np.arctan2(sin_h, cos_h) * 180 / np.pi
        
        nearby_vehicles.append({
            "vehicle_id": i,
            "is_ego": i == 0,
            "position": f"x={x:.2f}, y={y:.2f}",
            "velocity": f"vx={vx:.2f}, vy={vy:.2f}",
            "heading": f"{heading_angle:.1f}°",
            "distance": f"{distance:.2f}" if i > 0 else "N/A"
        })
    
    return {
        "agent_id": agent_idx,
        "nearby_vehicles": nearby_vehicles,
        "num_nearby_vehicles": len(nearby_vehicles)
    }

def analyze_collision_risks(observation):
    """Analyze collision risks in the intersection environment"""
    collision_risks = {
        "imminent_collision": False,
        "vehicles_on_collision_path": []
    }
    
    ego_vehicle = observation[0]
    if ego_vehicle[0] < 0.5:
        return collision_risks
        
    ego_x, ego_y = ego_vehicle[1], ego_vehicle[2]
    ego_vx, ego_vy = ego_vehicle[3], ego_vehicle[4]
    ego_cos_h, ego_sin_h = ego_vehicle[5], ego_vehicle[6]
    ego_heading = np.arctan2(ego_sin_h, ego_cos_h)
    
    for i in range(1, len(observation)):
        vehicle = observation[i]
        presence = vehicle[0]
        if presence < 0.5:
            continue
            
        v_x, v_y = vehicle[1], vehicle[2]
        v_vx, v_vy = vehicle[3], vehicle[4]
        v_cos_h, v_sin_h = vehicle[5], vehicle[6]
        v_heading = np.arctan2(v_sin_h, v_cos_h)
        
        distance = np.sqrt((v_x - ego_x)**2 + (v_y - ego_y)**2)
        if distance < 20:
            heading_diff = abs(((ego_heading - v_heading + np.pi) % (2 * np.pi)) - np.pi)
            # If headings differ by ~90°, they might be crossing paths
            if abs(heading_diff - np.pi/2) < np.pi/4:
                collision_risks["vehicles_on_collision_path"].append({
                    "vehicle_id": i,
                    "distance": distance,
                    "heading_diff": heading_diff * 180/np.pi
                })
                if distance < 10:
                    collision_risks["imminent_collision"] = True
    
    return collision_risks

def predict_action(observations):
    """
    Predict actions for all agents based on their observations
    BUT now we have only 3 possible actions in the environment:
      0 -> SLOWER + LANE_LEFT
      1 -> IDLE   + LANE_LEFT
      2 -> FASTER + LANE_LEFT
    We'll prompt the LLM with those three choices.
    """
    
    # Map the discrete action indices to names:
    available_actions = {
        0: "SLOWER + LEFT",
        1: "IDLE + LEFT",
        2: "FASTER + LEFT"
    }
    
    # Explanation for the LLM:
    observation_explanation = (
        "The observation is a 2D array where each row represents a vehicle and columns represent features:\n"
        "- Column 0: presence (1 if vehicle is present, 0 otherwise)\n"
        "- Column 1: x (absolute position along x-axis)\n"
        "- Column 2: y (absolute position along y-axis)\n"
        "- Column 3: vx (velocity along x-axis)\n"
        "- Column 4: vy (velocity along y-axis)\n"
        "- Column 5: cos_h (cosine of heading angle)\n"
        "- Column 6: sin_h (sine of heading angle)\n\n"
        "Row 0 is YOUR vehicle. Remaining rows are other vehicles.\n"
        "You have 3 possible actions: slow down left, maintain speed left, or speed up left.\n"
    )
    
    decision_guidelines = (
        "INTERSECTION DRIVING GUIDELINES:\n"
        "1. Observe vehicles approaching the intersection.\n"
        "2. Yield to vehicles that have the right of way.\n"
        "3. When making a left turn, ensure the path is clear of oncoming traffic.\n"
        "4. If immediate collision risk, slow down or maintain speed.\n"
        "5. Only proceed with faster left if you can safely complete the maneuver.\n"
    )
    
    intersection_guidance = (
        "INTERSECTION NAVIGATION GUIDE:\n"
        "- Your goal is to reach the left-turn destination safely.\n"
        "- You may slow down, stay idle, or accelerate, but always turning left.\n"
        "- Adjust speed if necessary to avoid collisions."
    )
    
    actions = []
    
    for agent_idx, observation in enumerate(observations):
        parsed_obs = parse_observation(observation, agent_idx)
        collision_risks = analyze_collision_risks(observation)
        
        # Logging
        log_message(f"Observation: {len(parsed_obs['nearby_vehicles'])} nearby vehicles", agent_id=agent_idx)
        log_message(f"Collision risks: {collision_risks}", agent_id=agent_idx)
        
        with open(f"intersection_explanations_agent_{agent_idx}.txt", "a") as f:
            f.write(f"\n----- Step Observation -----\n")
            f.write(f"Ego vehicle: {observation[0]}\n")
            for i in range(1, len(observation)):
                if observation[i][0] > 0.5:
                    f.write(f"Vehicle {i}: {observation[i]}\n")
            f.write(f"Collision risks: {collision_risks}\n")
        
        # Construct the prompt for the LLM
        prompt = (
            f"You are controlling vehicle #{agent_idx+1} in a multi-agent intersection simulation.\n\n"
            f"{observation_explanation}\n"
            f"{intersection_guidance}\n"
            f"{decision_guidelines}\n\n"
            f"Current observation array:\n{observation}\n\n"
            f"CHOOSE ONE action from these:\n"
            f"0: {available_actions[0]}\n"
            f"1: {available_actions[1]}\n"
            f"2: {available_actions[2]}\n\n"
            f"Answer format:\n"
            f"Action: <the number>\n"
            f"Reasoning: <ONE concise sentence>\n"
        )

        response = client.chat.completions.create(
            model="gpt-4o",  # Adjust model name as needed
            messages=[
                {"role": "system", "content": "You are an expert driving agent turning left at an intersection. You can slow, idle, or speed up, but must turn left. Keep your reasoning to ONE short sentence."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.0,
        )

        text = response.choices[0].message.content.strip()
        
        # Parse LLM response
        lines = text.splitlines()
        action_line = None
        reasoning_line = None
        for line in lines:
            if line.lower().startswith("action:"):
                action_line = line.split(":", 1)[1].strip()
            elif line.lower().startswith("reasoning:"):
                reasoning_line = line.split(":", 1)[1].strip()

        # Convert action to int
        try:
            action_choice = int(action_line)
        except:
            action_choice = 1  # default to "IDLE + LEFT" if parse fails
            log_message(f"Failed to parse action, defaulting to IDLE + LEFT", agent_id=agent_idx)
        
        action_name = available_actions.get(action_choice, f"Unknown action {action_choice}")
        
        log_message(f"Action: {action_choice} ({action_name})", agent_id=agent_idx)
        log_message(f"Reasoning: {reasoning_line}", agent_id=agent_idx)
        
        with open(f"intersection_explanations_agent_{agent_idx}.txt", "a") as f:
            f.write(f"Action: {action_choice} ({action_name}) | Explanation: {reasoning_line}\n")
            f.write(f"----- End Step -----\n\n")
        
        actions.append(action_choice)
    
    return tuple(actions)

# -------------------
# Main simulation loop
# -------------------
done = False
truncated = False
episode_step = 0
log_message("Starting simulation with left-turn + speed-control actions decided by OpenAI GPT.")

try:
    while not (done or truncated):
        episode_step += 1
        log_message(f"=== Step {episode_step} ===")
        
        action = predict_action(obs)
        next_obs, reward, done, truncated, info = env.step(action)
        
        if isinstance(reward, (tuple, list)):
            crashed_agents = []
            if 'crashed' in info:
                if isinstance(info['crashed'], (list, tuple)):
                    crashed_agents = [i for i, c in enumerate(info['crashed']) if c]
                elif info['crashed']:
                    # Single boolean -> everyone crashed
                    crashed_agents = list(range(len(reward)))
            
            # Log multi-agent rewards
            for i, r in enumerate(reward):
                log_message(f"Reward: {r:.4f}", agent_id=i)
                if i in crashed_agents:
                    log_message(f"COLLISION DETECTED! Agent {i} crashed.", agent_id=i)
                    with open(f"intersection_explanations_agent_{i}.txt", "a") as f:
                        f.write(f"\n===== CRASH DETECTED =====\nStep: {episode_step}\n")
                        f.write(f"Agent {i} crashed.\n")
                        f.write(f"Observation: {obs[i]}\n")
                        f.write(f"Collision risks: {analyze_collision_risks(obs[i])}\n")
                        f.write("===== END CRASH REPORT =====\n\n")
        else:
            # Single-agent or single reward
            log_message(f"Reward: {reward:.4f}")
            if 'crashed' in info and info['crashed']:
                log_message("COLLISION DETECTED!")
                with open("intersection_explanations_agent_0.txt", "a") as f:
                    f.write(f"\n===== CRASH DETECTED =====\nStep: {episode_step}\n")
                    f.write(f"Vehicle crashed.\n")
                    f.write(f"Observation: {obs[0]}\n")
                    f.write(f"Collision risks: {analyze_collision_risks(obs[0])}\n")
                    f.write("===== END CRASH REPORT =====\n\n")
        
        obs = next_obs
        
        # Small delay to make visualization clearer
        time.sleep(0.1)
        
    log_message("Simulation ended.")
    if done:
        log_message("Episode complete (done=True).")
    if truncated:
        log_message("Episode truncated (truncated=True).")

except Exception as e:
    log_message(f"Error during simulation: {str(e)}")

finally:
    env.close()
    log_message("Environment closed.")
    log_message(f"=== Intersection Session Ended at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===")
